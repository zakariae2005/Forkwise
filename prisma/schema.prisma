// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts      Account[]
  sessions      Session[]

  restaurant Restaurant[] @relation("UserRestaurant")


  createdAt     DateTime @default(now())

  
}

model Restaurant {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  logoUrl         String?
  bannerImageUrl  String?
  primaryColor    String?
  whatsappNumber  String?
  phoneNumber     String?
  location        String?
  instagramUrl     String?
  welcomeMessage  String?
  layoutType      String?

  createdAt       DateTime @default(now())

   userId          String   @unique
  user            User     @relation("UserRestaurant", fields: [userId], references: [id])
  menuItems       MenuItem[]
  incomes         Income[]
  expenses        Expense[]
  openingHours    OpeningHour[]
  promotions      Promotion[]
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Income {
  id            String   @id @default(cuid())
  value         Float
  note          String?
  date          DateTime @default(now())

  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id            String   @id @default(cuid())
  value         Float
  note          String?
  date          DateTime @default(now())

  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MenuItem {
  id            String   @id @default(cuid())
  name          String
  price         Float
  description   String?
  category      String?
  imageUrl      String?
  createdAt     DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  
}

model OpeningHour {
  id            String   @id @default(cuid())
  day           String
  openTime      String
  closeTime     String

  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Promotion {
  id            String   @id @default(cuid())
  message       String
  active        Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}


